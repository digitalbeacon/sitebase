<use master="" />
<default htmlAttributes="(IDictionary[[string,object]])ViewData['htmlAttributes'] ?? new Dictionary[[string,object]]()" />
<var inputType="(string)ViewData['inputType']" />
<%
MvcContrib.FluentHtml.Elements.IElement input;
if (inputType == "Email")
{
	input = this.EmailBox(ViewData.ModelMetadata.PropertyName).Value(ViewData.TemplateInfo.FormattedModelValue);
}
if (inputType == "Password")
{
	input = this.Password(ViewData.ModelMetadata.PropertyName).Value(ViewData.TemplateInfo.FormattedModelValue);
}
else
{
	input = this.TextBox(ViewData.ModelMetadata.PropertyName).Value(ViewData.TemplateInfo.FormattedModelValue);
}
foreach (var attr in htmlAttributes)
{
	input.SetAttr(attr.Key, attr.Value);
}
if (htmlAttributes.ContainsKey("readonly"))
{
	input.AddClass("readOnly");
}
if (!htmlAttributes.ContainsKey("autocomplete") && !HttpContext.Current.IsDebuggingEnabled)
{
	input.SetAttr("autocomplete", "off");
}
if (!htmlAttributes.ContainsKey("maxlength"))
{
	var validators = ModelValidatorProviders.Providers.GetValidators(ViewData.ModelMetadata, ViewContext);
	var rule = validators.SelectMany(v => v.GetClientValidationRules()).FirstOrDefault(m => m.ValidationType == "length");
	if (rule != null && rule.ValidationParameters.ContainsKey("max"))
	{
		input.SetAttr("maxlength", rule.ValidationParameters["max"]);
	}
}
%>${input}