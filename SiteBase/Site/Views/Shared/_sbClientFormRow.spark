<default property="null" type="string" />
<default subProperty="null" type="string" />
<default label="null" type="string" />
<default inputType="null" type="string" />
<default required="null" type="bool?" />
<default inputReadOnly="null" type="bool?" />
<default customText="null" type="string" />
<default includeEmptyOption="true" />
<default helpText="null" type="string" />
<default validation="null" type="string" />
<default validations="null" type="string[]" />
<default generateRowId="true" />
<default rowId="null" type="string" />
<default rowClass="inputType == submit ? 'form-row-submit' : null" />
<default inputClass="null" type="string" />
<default rowStyle="null" type="string" />
<default mask="null" type="string" />
<default maxLength="null" type="int?" />
<default isEntityModel="false" />
<default inputSize="0" />
<default enableRenderContent="inputType == renderContent || !property.HasText()" />
<default focus="false" />
<default enableBulkCreate="false" />
<default enableCaptcha="false" />
<default singularLabel="string.Empty" />
<default pluralLabel="string.Empty" />

<default onSubmit="null" type="string" />
<default onDelete="null" type="string" />
<default onCancel="null" type="string" />
<default enableSave="true" />
<default enableDelete="onDelete.HasText()" />
<default enableCancel="onCancel.HasText()" />
<set onDelete="'remove()'" if="onDelete.IsNullOrBlank()" />
<set onCancel="'cancel()'" if="onCancel.IsNullOrBlank()" />
<set inputClass="'form-control'" if="inputClass == null && inputType == submit && !enableCancel && !enableDelete" />
<default initClientModel="false" />
<default clientInputReadOnly="null" type="string" />
<default autocomplete="null" type="string" />
<default clientDisabled="null" type="string" />

<content name="formRowContent" if="enableRenderContent"><render /></content>

<var clientAttributes="new Dictionary[[string,string]]()" />
<sbSet dictionary="clientAttributes" key="'onSubmit'" value="onSubmit" />
<sbSet dictionary="clientAttributes" key="'onDelete'" value="onDelete" if="onDelete.HasText()" />
<sbSet dictionary="clientAttributes" key="'onCancel'" value="onCancel" if="onCancel.HasText()" />
<sbSet dictionary="clientAttributes" key="'readonly'" value="clientInputReadOnly" if="clientInputReadOnly.HasText()" />
<sbSet dictionary="clientAttributes" key="'autocomplete'" value="autocomplete" if="autocomplete.HasText()" />
<sbSet dictionary="clientAttributes" key="'disabled'" value="clientDisabled" if="clientDisabled != null" />

${ClientFormRow(new FormRowOptions {
	Property = property, 
	SubProperty = subProperty,
	Label = label,
	InputType = inputType,
	Required = required,
	InputReadOnly = inputReadOnly,
	CustomText = customText,
	IncludeEmptyOption = includeEmptyOption,
	HelpText = helpText, 
	Validation = validation,
	Validations = validations,
	GenerateRowId = generateRowId,
	RowId = rowId,
	RowClass = rowClass,
	InputClass = inputClass,
	RowStyle = rowStyle,
	Mask = mask,
	Focus = focus,
	MaxLength = maxLength,
	IsEntityModel = isEntityModel,
	EnableSave = enableSave,
	EnableDelete = enableDelete,
	EnableCancel = enableCancel,
	EnableBulkCreate = enableBulkCreate,
	EnableCaptcha = enableCaptcha,
	InputSize = inputSize,
	Model = Model,
	FormPanelId = panelId,
	SingularLabel = singularLabel,
	PluralLabel = pluralLabel,
	ViewData = ViewData,
	RenderContent = enableRenderContent ? Content["formRowContent"].ToString() : null
}, clientAttributes, clientModel, initClientModel)}

<if condition="enableRenderContent">
# Content.Remove("formRowContent");
</if>